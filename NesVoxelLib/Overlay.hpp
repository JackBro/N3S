#pragma once
#include "N3s3d.hpp"

const static int characterCount = 64;

using namespace std;

class Overlay {
public:
	static void init();
	static void unload();
	static void drawString(int x, int y, int scale, string s);
	static void test();
	static bool shadow;
};

struct BitmapCharacter
{
	int pixels[64];
};

//						  01234567890123456789012345678901234
// starting with a space: !?"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVQXYZ[\]^`
// a..z then {|}~
static BitmapCharacter bitmapCharacters[26] =
{
	{	// 0 !
		0,0,0,1,1,0,0,0,
		0,0,1,1,1,1,0,0,
		0,0,1,1,1,1,0,0,
		0,0,1,1,1,1,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,1,1,0,0,0
	},
	{	// 1 ?
		0,0,1,1,1,1,0,0,
		0,1,1,0,1,1,1,0,
		0,0,0,0,0,1,1,0,
		0,0,0,0,1,1,1,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,1,1,0,0,0
	},
	{	// 2 "
		1,1,0,1,1,0,0,0,
		1,1,0,1,1,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 3 #
		0,1,1,0,1,1,0,0,
		0,1,1,0,1,1,0,0,
		1,1,1,1,1,1,1,0,
		0,1,1,0,1,1,0,0,
		0,1,1,0,1,1,0,0,
		1,1,1,1,1,1,1,0,
		0,1,1,0,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 4 $
		0,1,1,1,1,0,0,0,
		1,1,0,1,1,1,0,0,
		1,1,0,1,0,0,0,0,
		0,1,1,1,1,1,0,0,
		0,0,0,1,0,1,1,0,
		1,1,0,1,0,1,1,0,
		0,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 5 %
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,1,0,0,
		0,0,0,0,1,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,1,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 6 &
		0,0,1,1,0,0,0,0,
		0,1,0,0,1,0,0,0,
		0,1,0,0,1,0,0,0,
		0,0,1,1,0,0,0,0,
		0,1,0,0,1,1,1,0,
		1,0,0,0,0,1,0,0,
		0,1,1,1,1,0,1,0,
		0,0,0,0,0,0,0,0
	},
	{	 // 7 '
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 8 (
		0,0,0,1,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 9 )
		0,0,1,0,0,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 10 *
		0,0,1,0,0,0,0,0,
		0,1,1,1,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 11 +
		0,0,0,0,0,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 12 ,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 13 -
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,1,1,1,1,1,0,0,
		0,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 14 .
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 15 /
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,0,0,0,
		0,0,1,1,0,0,0,0,
		0,1,1,0,0,0,0,0,
		1,1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 16 0
		0,0,1,1,1,0,0,0,
		0,1,0,0,1,1,0,0,
		1,1,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		0,1,0,0,0,1,0,0,
		0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 17 1
		0,0,0,1,1,0,0,0,
		0,0,1,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,1,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0
	},
	{	// 18 2
		0,1,1,1,1,1,0,0,
		1,1,0,0,0,1,1,0,
		0,0,0,0,1,1,1,0,
		0,0,1,1,1,1,0,0,
		0,1,1,1,1,0,0,0,
		1,1,1,0,0,0,0,0,
		1,1,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0
	},
	{	// 19 3
		0,1,1,1,1,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		0,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 20 4
		0,0,0,0,1,1,0,0,
		0,0,1,1,1,1,0,0,
		0,1,1,0,1,1,0,0,
		1,1,0,0,1,1,0,0,
		1,1,1,1,1,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 21 5
		1,1,1,1,1,1,1,0,
		1,1,0,0,0,0,0,0,
		1,1,1,1,1,1,0,0,
		0,0,0,0,0,1,1,0,
		0,0,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		0,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 22 6
		0,0,1,1,1,1,0,0,
		0,1,1,0,0,0,0,0,
		1,1,0,0,0,0,0,0,
		1,1,1,1,1,1,0,0,
		1,1,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		0,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 23 7
		1,1,1,1,1,1,1,0,
		1,1,0,0,0,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 24 8
		0,1,1,1,1,1,0,0,
		1,1,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		0,1,1,1,1,1,0,0,
		1,1,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		0,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0
	},
	{	// 25 9
		0,1,1,1,1,1,0,0,
		1,1,0,0,0,1,1,0,
		1,1,0,0,0,1,1,0,
		0,1,1,1,1,1,1,0,
		0,0,0,0,0,1,1,0,
		0,0,0,0,1,1,0,0,
		0,1,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0
	}
};

VoxelMesh createMeshFromBitmapCharacter(BitmapCharacter bitmap);